name: buildx

on:
  push:
  pull_request:

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prepare
        run: |
          DOCKER_PLATFORMS=linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x

          VERSION=${GITHUB_REF#refs/*/}
          TAGS="${VERSION}"

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAGS="$TAGS,latest"
          fi
          if [[ $VERSION = "master" ]]; then
            TAGS="$TAGS,beta"
          fi

          echo ::set-output name=platforms::${DOCKER_PLATFORMS}
          echo ::set-output name=tags::${TAGS}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        # uses: crazy-max/ghaction-docker-buildx@v3
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build
        # id: docker_build
        uses: docker/build-push-action@v2
        # with:
          # push: true
          # tags: user/app:latest
          # build-args: |
            # arg1=value1
            # arg2=value2


      # - name: Docker Buildx (build)
      #   run: |
      #     docker build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

      - name: Test
        run: |
          docker-compose --file docker-compose.test.yml up --exit-code-from sut --timeout 10 --build

      - name: Build and push
        # id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prepare.outputs.tags }}
          platforms: ${{ steps.prepare.outputs.platforms }}

      # - name: Docker Login
      #   if: success()
      #   env:
      #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      #   run: |
      #     echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin

      # - name: Docker Buildx (push)
      #   if: success() && github.event_name != 'pull_request'
      #   run: |
      #     docker build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}

      # - name: Docker Check Manifest
      #   if: always() && github.event_name != 'pull_request'
      #   run: |
      #     docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

      # - name: Clear
      #   if: always() && github.event_name != 'pull_request'
      #   run: |
      #     rm -f ${HOME}/.docker/config.json

